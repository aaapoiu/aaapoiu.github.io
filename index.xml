<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aaapoiu</title>
    <link>https://aaapoiu.github.io/</link>
    <description>Recent content on aaapoiu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 May 2021 01:31:23 +0900</lastBuildDate><atom:link href="https://aaapoiu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Template</title>
      <link>https://aaapoiu.github.io/post/leetcode/template/</link>
      <pubDate>Tue, 04 May 2021 01:31:23 +0900</pubDate>
      
      <guid>https://aaapoiu.github.io/post/leetcode/template/</guid>
      <description>problem https://leetcode.com/problems/two-sum
problem description first approach  description  //code  second approach  description  // code  </description>
    </item>
    
    <item>
      <title>Longest Substring Without Repeating Characters</title>
      <link>https://aaapoiu.github.io/post/leetcode/longest-substring-without-repeating-characters/</link>
      <pubDate>Tue, 04 May 2021 01:29:14 +0900</pubDate>
      
      <guid>https://aaapoiu.github.io/post/leetcode/longest-substring-without-repeating-characters/</guid>
      <description>problem https://leetcode.com/problems/longest-substring-without-repeating-characters/
Given a string s, find the length of the longest substring without repeating characters. test case &amp;quot;&amp;quot; &amp;quot;a&amp;quot; &amp;quot;aaa&amp;quot; &amp;quot;aaab&amp;quot; &amp;quot;pwwkew&amp;quot; &amp;quot;abcabcbb&amp;quot; 0 1 1 2 3 3 o(n) approach  서브스트링을 관리하는 커서가 왼쪽, 오른쪽 두 개 있다. 커서 사이의 유니크한 문자들을 관리하는 셋이 있다 오른쪽 커서가 움직이면서, 유니크한 문자라면 셋이 증가하고, 유니크하지 않은 문자라면, 유니크해질때까지 왼쪽 커서를 움직인다. 따라서 왼쪽커서와 오른쪽커서의 사이에 있는 문자는 유니크한 문자를 가진 서브스트링임을 유지한다  class Solution { public int lengthOfLongestSubstring(String s) { if (s == null || s.</description>
    </item>
    
    <item>
      <title>Second</title>
      <link>https://aaapoiu.github.io/post/second/</link>
      <pubDate>Fri, 30 Apr 2021 02:37:50 +0900</pubDate>
      
      <guid>https://aaapoiu.github.io/post/second/</guid>
      <description>second post </description>
    </item>
    
    <item>
      <title>Two Sum</title>
      <link>https://aaapoiu.github.io/post/leetcode/two-sum/</link>
      <pubDate>Thu, 29 Apr 2021 18:58:48 +0900</pubDate>
      
      <guid>https://aaapoiu.github.io/post/leetcode/two-sum/</guid>
      <description>problem https://leetcode.com/problems/two-sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. Input: nums = [2,7,11,15], target = 9 Output: [0,1] Output: Because nums[0] + nums[1] == 9, we return [0, 1]. test case [2,5,5,11] 10 [1,2] [2,5,5,11] 13 [0,3] o(n^2) approach class Solution { public int[] twoSum(int[] nums, int target) { int size = nums.length; for (int i = 0; i &amp;lt; size; i++) { int a = nums[i]; for (int j = i+1; j &amp;lt; size; j++) { int b = nums[j]; if (target == (a+b)) { return new int[]{i, j}; } else { continue; } } } return new int[]{-1, -1}; } } first approach  two loop array 를 탐색하면서, value 와 value 의 index 를 hashmap 으로 저장한다 array 를 다시 한번 탐색하면서 target - value 의 값이 haspmap 에 존재하는지, 존재한다면 index 가 현재 index 가 아닌지, 아니라면 답  class Solution { public int[] twoSum(int[] nums, int target) { Map&amp;lt;Integer /* value */, ArrayList&amp;lt;Integer&amp;gt; /* indices */&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); int len = nums.</description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://aaapoiu.github.io/post/first/</link>
      <pubDate>Thu, 29 Apr 2021 01:30:02 +0900</pubDate>
      
      <guid>https://aaapoiu.github.io/post/first/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
